<?php 

use PHPUnit\Framework\TestCase;

use SigmaPHP\Core\Models\BaseModel;

/**
 * Base Model Test
 * 
 * ? Please note : for this test unit we will need a real 
 * ? database connection with empty test database to run our tests.
 * ? I know this's not the best idea , but i personally believe it's
 * ? more reliable.
 */
class BaseModelTest extends TestCase
{
    /**
     * @var array $dbConfigs
     */
    private $dbConfigs;

    /**
     * BaseModelTest SetUp
     *
     * @return void
     */
    public function setUp(): void
    {
        // add your database configs
        $this->dbConfigs = [
            'db_host' => 'localhost',
            'db_name' => 'db_test',
            'db_user' => 'root',
            'db_pass' => '12345678'
        ];
    }
    
    /**
     * Connect to database.
     * 
     * @return \PDO
     */
    private function connectToDatabase()
    {
        return new \PDO(
            "mysql:host={$this->dbConfigs['db_host']};
            dbname={$this->dbConfigs['db_name']}",
            $this->dbConfigs['db_user'],
            $this->dbConfigs['db_pass']
        );
    }

    /**
     * Create test table.
     *
     * @return void
     */
    private function createTestTable()
    {
        $testTable = $this->connectToDatabase()->prepare("
            CREATE TABLE IF NOT EXISTS base_models (
                id INT(11) AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(25) NOT NULL,
                email VARCHAR(50) NOT NULL
            );
        ");

        $testTable->execute();
    }

    /**
     * Drop test table.
     *
     * @return void
     */
    private function dropTestTable()
    {
        $testTable = $this->connectToDatabase()->prepare("
            Drop TABLE IF EXISTS base_models;
        ");

        $testTable->execute();
    }

    /**
     * Test throws exception if no database configs was provided.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoDatabaseConfigsWasProvided()
    {
        $this->dropTestTable();
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel();
    }
    
    /**
     * Test throws exception if no database host was provided.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoDatabaseHostWasProvided()
    {
        unset($this->dbConfigs['db_host']);
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel($this->dbConfigs);
    }

    /**
     * Test throws exception if no database name was provided.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoDatabaseNameWasProvided()
    {
        unset($this->dbConfigs['db_name']);
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel($this->dbConfigs);
    }
    
    /**
     * Test throws exception if no database user was provided.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoDatabaseUserWasProvided()
    {
        unset($this->dbConfigs['db_user']);
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel($this->dbConfigs);
    }

    /**
     * Test throws exception if no database pass was provided.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoDatabasePassWasProvided()
    {
        unset($this->dbConfigs['db_pass']);
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel($this->dbConfigs);
    }

    /**
     * Test throws exception if table does not exist.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfTableWasDoesNotExist()
    {
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel($this->dbConfigs);
    }

    /**
     * Test auto generated table name is correct.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testAutoGeneratedTableNameIsCorrect()
    {
        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct() {}
            public function getTableName($class) {
                return $this->createTableName($class);
            }
        };

        $this->assertEquals('base_models',
            $testBaseModel->getTableName('\BaseModel'));
    }

    /**
     * Test auto extracted fields are correct.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testAutoExtractedFieldsAreCorrect()
    {
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                $this->db_name = $dbConfigs['db_name'];
                parent::__construct($dbConfigs);
            }
            public function getTableFields() {
                return $this->fetchTableFields($this->db_name);
            }
        };

        $this->assertEquals(['name', 'email'],
            $testBaseModel->getTableFields());

        $this->dropTestTable();
    }

    /**
     * Test insert data.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testInsertData()
    {
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $testBaseModel->create(['name', 'email'], ['test', 'test@test']);

        $testTable = $this->connectToDatabase()->prepare("
            SELECT * FROM base_models;
        ");

        $testTable->execute();

        $this->assertEquals(1, count($testTable->fetchAll()));

        $this->dropTestTable();
    }

    /**
     * Test throws exception if no fields were provided to be inserted.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoFieldsWereProvidedToBeInserted()
    {
        $this->expectException(\Exception::class);

        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $this->dropTestTable();

        $testBaseModel->create(null, ['test', 'test@test']);
    }

    /**
     * Test throws exception if insert fields and values are mismatched.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfInsertFieldsAndValuesAreMismatched()
    {
        $this->expectException(\Exception::class);
        
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $this->dropTestTable();

        $testBaseModel->create(['name'], ['test', 'test@test']);
    }

    /**
     * Test update data.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testUpdateData()
    {
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $testBaseModel->create(['name', 'email'], ['bad', 'test@test']);

        $testBaseModel->update(1, ['name'], ['good']);

        $testTable = $this->connectToDatabase()->prepare("
            SELECT * FROM base_models;
        ");

        $testTable->execute();

        $this->assertEquals('good', $testTable->fetchAll()[0]['name']);

        $this->dropTestTable();
    }

    /**
     * Test throws exception if no id was provided to be updated.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoIdWasProvidedToBeUpdated()
    {
        $this->expectException(\Exception::class);

        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $this->dropTestTable();

        $testBaseModel->update(null, ['name'], ['test']);
    }

    /**
     * Test throws exception if no fields were provided to be updated.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoFieldsWereProvidedToBeUpdated()
    {
        $this->expectException(\Exception::class);

        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $this->dropTestTable();

        $testBaseModel->update(1, null, ['test', 'test@test']);
    }

    /**
     * Test throws exception if update fields and values are mismatched.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfUpdateFieldsAndValuesAreMismatched()
    {
        $this->expectException(\Exception::class);
        
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $this->dropTestTable();

        $testBaseModel->update(1, ['name'], ['test', 'test@test']);
    }

    /**
     * Test delete data.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testDeleteData()
    {
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $testBaseModel->create(['name', 'email'], ['test', 'test@test']);

        $testBaseModel->delete(1);

        $testTable = $this->connectToDatabase()->prepare("
            SELECT * FROM base_models;
        ");

        $testTable->execute();

        $this->assertEquals(0, count($testTable->fetchAll()));

        $this->dropTestTable();
    }

    /**
     * Test throws exception if no id was provided to be deleted.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoIdWasProvidedToBeDeleted()
    {
        $this->expectException(\Exception::class);

        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $this->dropTestTable();

        $testBaseModel->delete(null);
    }

    /**
     * Test fetch all data.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testFetchAllData()
    {
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $testBaseModel->create(['name', 'email'], ['test1', 'test@test']);
        $testBaseModel->create(['name', 'email'], ['test2', 'test@test']);

        $this->assertEquals(2, count($testBaseModel->all()));

        $this->dropTestTable();
    }

    /**
     * Test find data by id.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testFindDataById()
    {
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $testBaseModel->create(['name', 'email'], ['test1', 'test@test']);
        $testBaseModel->create(['name', 'email'], ['test2', 'test@test']);

        $this->assertEquals('test1', $testBaseModel->find(1)['name']);

        $this->dropTestTable();
    }

    /**
     * Test find data by field.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testFindDataByField()
    {
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $testBaseModel->create(['name', 'email'], ['test1', 'test@test']);
        $testBaseModel->create(['name', 'email'], ['test2', 'test@test']);

        $this->assertEquals('test2', $testBaseModel
            ->findBy('name', 'test2')['name']);

        $this->dropTestTable();
    }

    /**
     * Test query data.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testQueryData()
    {
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function __construct($dbConfigs) {
                $this->table = 'base_models';
                parent::__construct($dbConfigs);
            }
        };

        $testBaseModel->create(['name', 'email'], ['test1', 'test@test']);
        $testBaseModel->create(['name', 'email'], ['test2', 'test@test']);

        $this->assertEquals('test2', $testBaseModel
            ->query()->where('name', 'test2')->fetch()['name']);

        $this->dropTestTable();
    }
}