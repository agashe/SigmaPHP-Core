<?php 

use PHPUnit\Framework\TestCase;

use SigmaPHP\Core\Models\BaseModel;

/**
 * Base Model Test
 * 
 * ? Please note : for this test unit we will need a real 
 * ? database connection with empty test database to run our tests.
 * ? I know this's not the best idea , but i personally believe it's
 * ? more reliable.
 */
class BaseModelTest extends TestCase
{
    /**
     * @var array $dbConfigs
     */
    private $dbConfigs;

    /**
     * BaseModelTest SetUp
     *
     * @return void
     */
    public function setUp(): void
    {
        // add your database configs
        $this->dbConfigs = [
            'db_host' => 'localhost',
            'db_name' => 'db_test',
            'db_user' => 'root',
            'db_pass' => '12345678'
        ];
    }

    /**
     * Connect to database.
     * 
     * @return \PDO
     */
    private function connectToDatabase()
    {
        return new \PDO(
            "mysql:host={$this->dbConfigs['db_host']};
            dbname={$this->dbConfigs['db_name']}",
            $this->dbConfigs['db_user'],
            $this->dbConfigs['db_pass']
        );
    }

    /**
     * Create test table.
     *
     * @return void
     */
    private function createTestTable()
    {
        $testTable = $this->connectToDatabase()->prepare("
            CREATE TABLE basemodels (
                id INT(11) AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(25) NOT NULL,
                email VARCHAR(50) NOT NULL
            );
        ");

        $testTable->execute();
    }

    /**
     * Drop test table.
     *
     * @return void
     */
    private function dropTestTable()
    {
        $testTable = $this->connectToDatabase()->prepare("
            Drop TABLE basemodels;
        ");

        $testTable->execute();
    }

    /**
     * Test throws exception if no database configs was provided.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoDatabaseConfigsWasProvided()
    {
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel();
    }
    
    /**
     * Test throws exception if no database host was provided.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoDatabaseHostWasProvided()
    {
        unset($this->dbConfigs['db_host']);
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel($this->dbConfigs);
    }

    /**
     * Test throws exception if no database name was provided.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoDatabaseNameWasProvided()
    {
        unset($this->dbConfigs['db_name']);
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel($this->dbConfigs);
    }
    
    /**
     * Test throws exception if no database user was provided.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoDatabaseUserWasProvided()
    {
        unset($this->dbConfigs['db_user']);
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel($this->dbConfigs);
    }

    /**
     * Test throws exception if no database pass was provided.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfNoDatabasePassWasProvided()
    {
        unset($this->dbConfigs['db_pass']);
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel($this->dbConfigs);
    }

    /**
     * Test throws exception if table does not exist.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testThrowsExceptionIfTableWasDoesNotExist()
    {
        $this->expectException(\Exception::class);
        $baseModel = new BaseModel($this->dbConfigs);
    }

    /**
     * Test auto generated table name is correct.
     *
     * @runInSeparateProcess
     * @return void
     */
    public function testAutoGeneratedTableNameIsCorrect()
    {
        $this->createTestTable();

        $testBaseModel = new class($this->dbConfigs) extends BaseModel {
            public function getTableName() {
                return $this->table;
            }
        };

        $this->assertEquals('base_models', $testBaseModel->getTableName());

        $this->dropTestTable();
    }
}